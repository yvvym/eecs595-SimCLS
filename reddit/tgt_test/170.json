{"article": ["several mutations might be done for that code: int foo(int x) return x+x; int foo(int x) return x-x; int foo(int x) return x/x; the first one will still pass, while the second and third should be successfully killed by the unit test.", "you would then have to write at least one other unit test to kill the first.", "and that is a problem.", "now we've got two passing tests, 100% coverage and implementation that violates the contract for most possible inputs.", "i mean whole idea of writing tests to maximize coverage metric seems wrong to me, you'll get a lot of tests, that you have to maintain, but little information about implementation.", "actually, this approach gives zero information about implementation, so it's kind of wrong to declare that it helps to catch bugs, it doesn't.", "what it really does well is assessing quality of your unit tests, which is important."], "abstract": ["great tool, but article showcases it in a wrong light."], "candidates": [[["the idea of writing tests to maximize coverage metric seems wrong to me.", "what it really does well is assessing quality of your unit tests, which is important."], 0.07017543859649121], [["several mutations might be done for that code: int foo(int x) return x+x; int foo (int x), x-x;int foo( int x) returns x/x; the first one will still pass, while"], 0.0], [["several mutations might be done for that code: int foo(int x) return x+x; int foo (int x), x-x;int foo( int x) returns x/x;.", "the first one will still pass"], 0.0], [["several mutations might be done for that code: int foo(int x) return x+x; int foo (int x), x-x;int foo( int x) returns x/x;.", "the first one will still"], 0.0], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs.", "the idea of writing tests to maximize coverage metric seems wrong to me.", "what it really does well is assessing quality.", "it's kind of wrong to declare"], 0.07272727272727274], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs.", "the idea of writing tests to maximize coverage metric seems wrong to me.", "what it really does well is assessing quality."], 0.08333333333333333], [["unit tests can help you catch bugs, but they don't give enough information about implementation.", "what it really does well is assessing quality of your unit tests, which is important."], 0.06504065040650407], [["unit tests are a good way to assess quality of your code.", "but they don't give enough information about implementation.", "the idea of writing tests to maximize coverage metric seems wrong to me."], 0.0909090909090909], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs.", "the idea of writing tests to maximize coverage metric seems wrong to me."], 0.06666666666666667], [["unit tests are a good way to assess quality of your code, says peter houghton.", "but they don't give enough information about implementation, he says.", "houghson: \"this approach gives zero information about implementation\""], 0.0606060606060606], [["unit tests don't catch bugs, they just assess quality of tests, which is important.", "the idea of writing tests to maximize coverage metric seems wrong to me."], 0.035087719298245605], [["unit tests are a good way to assess quality of your code, says peter houghton.", "but they don't give enough information about implementation, he says."], 0.07407407407407407], [["tests that maximize coverage metric are wrong, says peter hough.", "tests that give little information about implementation are also wrong, he says."], 0.04166666666666668], [["unit tests are a good way to assess quality of your code.", "but they don't give enough information about implementation."], 0.08602150537634408], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs."], 0.04938271604938272], [["several mutations might be done for that code: int foo(int x) return x+x; int foo('x'): x/x;"], 0.0]], "article_untok": ["several mutations might be done for that code: int foo(int x) return x+x; int foo(int x) return x-x; int foo(int x) return x/x; the first one will still pass, while the second and third should be successfully killed by the unit test.", "you would then have to write at least one other unit test to kill the first.", "and that is a problem.", "now we've got two passing tests, 100% coverage and implementation that violates the contract for most possible inputs.", "i mean whole idea of writing tests to maximize coverage metric seems wrong to me, you'll get a lot of tests, that you have to maintain, but little information about implementation.", "actually, this approach gives zero information about implementation, so it's kind of wrong to declare that it helps to catch bugs, it doesn't.", "what it really does well is assessing quality of your unit tests, which is important."], "abstract_untok": ["great tool, but article showcases it in a wrong light."], "candidates_untok": [[["the idea of writing tests to maximize coverage metric seems wrong to me.", "what it really does well is assessing quality of your unit tests, which is important."], 0.07017543859649121], [["several mutations might be done for that code: int foo(int x) return x+x; int foo (int x), x-x;int foo( int x) returns x/x; the first one will still pass, while"], 0.0], [["several mutations might be done for that code: int foo(int x) return x+x; int foo (int x), x-x;int foo( int x) returns x/x;.", "the first one will still pass"], 0.0], [["several mutations might be done for that code: int foo(int x) return x+x; int foo (int x), x-x;int foo( int x) returns x/x;.", "the first one will still"], 0.0], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs.", "the idea of writing tests to maximize coverage metric seems wrong to me.", "what it really does well is assessing quality.", "it's kind of wrong to declare"], 0.07272727272727274], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs.", "the idea of writing tests to maximize coverage metric seems wrong to me.", "what it really does well is assessing quality."], 0.08333333333333333], [["unit tests can help you catch bugs, but they don't give enough information about implementation.", "what it really does well is assessing quality of your unit tests, which is important."], 0.06504065040650407], [["unit tests are a good way to assess quality of your code.", "but they don't give enough information about implementation.", "the idea of writing tests to maximize coverage metric seems wrong to me."], 0.0909090909090909], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs.", "the idea of writing tests to maximize coverage metric seems wrong to me."], 0.06666666666666667], [["unit tests are a good way to assess quality of your code, says peter houghton.", "but they don't give enough information about implementation, he says.", "houghson: \"this approach gives zero information about implementation\""], 0.0606060606060606], [["unit tests don't catch bugs, they just assess quality of tests, which is important.", "the idea of writing tests to maximize coverage metric seems wrong to me."], 0.035087719298245605], [["unit tests are a good way to assess quality of your code, says peter houghton.", "but they don't give enough information about implementation, he says."], 0.07407407407407407], [["tests that maximize coverage metric are wrong, says peter hough.", "tests that give little information about implementation are also wrong, he says."], 0.04166666666666668], [["unit tests are a good way to assess quality of your code.", "but they don't give enough information about implementation."], 0.08602150537634408], [["unit tests are useful for assessing quality of your tests.", "but they don't help catch bugs."], 0.04938271604938272], [["several mutations might be done for that code: int foo(int x) return x+x; int foo('x'): x/x;"], 0.0]]}