{"article": ["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing - do you have to make a publication subclass for each type of book?", "comicbookpublication and such?", "or are you supposed to have one publication class and have it handle different types of books?", "or is it up to you to decide?", "see, if your base class is book and it has all types of subclasses, you can just implement one method  removepublication(book book)  inside publication class and it will work with every instance of the book subclass  right \"out of the box\".", "if you're supposed to have different subclasses for publication, you can still maintain an arraylist of the book type and implement  remove  method once, in a parent class:   public class publication {          protected arraylist&lt;book&gt; listofbooks;           public boolean removepublication(book book) {                 listofbooks.remove(book);           }     }        comicbookpublication will then inherit its own arraylist of comic books, and bookpublication will have its own arraylist of some other books, and  remove  method will work on each respective list without you having to make it abstract and override it for every subclass - that's why we have a book base class to begin with.", "when you create an abstract class, you want to make sure that some subclass' behavior will be  different  from that of another subclass - that's why you override the abstract method depending on the subclass.", "p.s.", "before i confuse the rest of bejeezus out of you, maybe link to an assignment or"], "abstract": ["will give a clearer picture of the expected design :]"], "candidates": [[["if your base class is book and it has all types of subclasses, you can just implement one method  removepublication(book book) inside publication class.", "comicbookpublication will then inherit its own arraylist of comic books, and"], 0.059259259259259255], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comicbook"], 0.05333333333333334], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comic"], 0.05333333333333334], [["if you have a parent abstract class publication that you're subclassing, you can just implement one method inside publication class.", "comicbookpublication will then inherit its own arraylist of comic books, and bookpublication has its own arraylist of"], 0.08510638297872342], [["so as far as i understand, you have to make a publication subclass for each type of book.", "or are you supposed to have one publication class and have it handle different types of books?", "or is it up to you to decide?", "see,"], 0.05031446540880503], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comicbookpublic"], 0.05333333333333334], [["if you have a parent abstract class publication that you're subclassing, you can just implement one method  removepublication(book book) inside publication class and it will work with every instance of the book subclass right \"out of the"], 0.11171497584541062], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comic"], 0.05333333333333334], [["in the example, we have a book base class and all its subclasses.", "we want to make sure that some subclass' behavior will be different from that of another.", "we override the abstract method depending on the subclass.", "we also want to link"], 0.10256410256410257], [["in the example, we have a book base class and all its subclasses.", "we want to make sure that some subclass' behavior will be different from that of another.", "we override the abstract method depending on the subclass."], 0.11347517730496454], [["the method removepublication(book book) is used to remove a book from an arraylist.", "the method is used by the parent abstract class publication.", "the parent abstractclass is used for the creation of different subclasses.", "the remove method is"], 0.08333333333333333], [["the method removepublication(book book) is used to remove a book from an arraylist.", "the method is used by the parent abstract class publication.", "the parent abstractclass is used for the creation of different subclasses."], 0.09090909090909093], [["author: \"i'm not sure why i'm asking this question\" \"i want to know if i can make this method work with all types of books\" \"if i'm supposed to have different subclasses, i can still maintain an array"], 0.02666666666666667], [["the removepublication method is used to remove a book from an arraylist.", "the method is not abstract, so you can override it for each subclass."], 0.0784313725490196], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing - do you have to make a publication subclass for each type of book?", "comic"], 0.05333333333333334], [["author: \"i'm not sure why i'm asking this question\""], 0.0]], "article_untok": ["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing - do you have to make a publication subclass for each type of book?", "comicbookpublication and such?", "or are you supposed to have one publication class and have it handle different types of books?", "or is it up to you to decide?", "see, if your base class is book and it has all types of subclasses, you can just implement one method  removepublication(book book)  inside publication class and it will work with every instance of the book subclass  right \"out of the box\".", "if you're supposed to have different subclasses for publication, you can still maintain an arraylist of the book type and implement  remove  method once, in a parent class:   public class publication {          protected arraylist&lt;book&gt; listofbooks;           public boolean removepublication(book book) {                 listofbooks.remove(book);           }     }        comicbookpublication will then inherit its own arraylist of comic books, and bookpublication will have its own arraylist of some other books, and  remove  method will work on each respective list without you having to make it abstract and override it for every subclass - that's why we have a book base class to begin with.", "when you create an abstract class, you want to make sure that some subclass' behavior will be  different  from that of another subclass - that's why you override the abstract method depending on the subclass.", "p.s.", "before i confuse the rest of bejeezus out of you, maybe link to an assignment or"], "abstract_untok": ["will give a clearer picture of the expected design :]"], "candidates_untok": [[["if your base class is book and it has all types of subclasses, you can just implement one method  removepublication(book book) inside publication class.", "comicbookpublication will then inherit its own arraylist of comic books, and"], 0.059259259259259255], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comicbook"], 0.05333333333333334], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comic"], 0.05333333333333334], [["if you have a parent abstract class publication that you're subclassing, you can just implement one method inside publication class.", "comicbookpublication will then inherit its own arraylist of comic books, and bookpublication has its own arraylist of"], 0.08510638297872342], [["so as far as i understand, you have to make a publication subclass for each type of book.", "or are you supposed to have one publication class and have it handle different types of books?", "or is it up to you to decide?", "see,"], 0.05031446540880503], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comicbookpublic"], 0.05333333333333334], [["if you have a parent abstract class publication that you're subclassing, you can just implement one method  removepublication(book book) inside publication class and it will work with every instance of the book subclass right \"out of the"], 0.11171497584541062], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing.", "do you have to make a publication subclass for each type of book?", "comic"], 0.05333333333333334], [["in the example, we have a book base class and all its subclasses.", "we want to make sure that some subclass' behavior will be different from that of another.", "we override the abstract method depending on the subclass.", "we also want to link"], 0.10256410256410257], [["in the example, we have a book base class and all its subclasses.", "we want to make sure that some subclass' behavior will be different from that of another.", "we override the abstract method depending on the subclass."], 0.11347517730496454], [["the method removepublication(book book) is used to remove a book from an arraylist.", "the method is used by the parent abstract class publication.", "the parent abstractclass is used for the creation of different subclasses.", "the remove method is"], 0.08333333333333333], [["the method removepublication(book book) is used to remove a book from an arraylist.", "the method is used by the parent abstract class publication.", "the parent abstractclass is used for the creation of different subclasses."], 0.09090909090909093], [["author: \"i'm not sure why i'm asking this question\" \"i want to know if i can make this method work with all types of books\" \"if i'm supposed to have different subclasses, i can still maintain an array"], 0.02666666666666667], [["the removepublication method is used to remove a book from an arraylist.", "the method is not abstract, so you can override it for each subclass."], 0.0784313725490196], [["ah, i see.", "so you do want them as parameters.", "so as far as i understand you have a parent abstract class publication that you're subclassing - do you have to make a publication subclass for each type of book?", "comic"], 0.05333333333333334], [["author: \"i'm not sure why i'm asking this question\""], 0.0]]}