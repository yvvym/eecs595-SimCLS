{"article": ["like what others have said, it really depends on if you're into hardware design/verif/ect.", "but wait, whats hardware design/verif/ect?", "well you know making chips, the things that all code runs on?", "yeah it's done with the aptly named hardware design.", "other terms that apply include vlsi, digital design, and black magic.", "if you do choose to go that path, you'll need to know your tools (verilog/vhdl, systemverilog/systemc, specman e, tcl, ect), your methodologies (arch/design/pre-silicon verification/post-sil verif), your architectural knowledge (pipelining/muxing/memory/critical path/block feng-shui).", "keep in mind, you should at least have bits of these tapped, so that you can understand  why  the senior arch says that \"the memory can't be  there  between the fifo buffers and the fabric connections\" when you are tasked with testing the fabric tx rates in post-silicon.", "oh yeah, like normal code, learning verilog does not mean you're good at it.", "sure you can code it, but rtl is an art form.", "you're making thousands, millions, or billions of little transistors and making them do massive jobs (like run arbitrary bytes that create predictable (given corresponding input) results, i.e.", "programs) with attention to clock frequency domains, power constraints, heat, ley lines, and timing issues.", "it's called black magic for a reason.", "now get real good at a handful of those, become an excellent pre-sil simulation wizard, or a crazy nit-picky path/route person, or a knee-deep-in-hardware post-sil verif engineer.", "so yeah that's hardware...anyways:   as a comp eng, you should always know c, and be comfortable with using it on bare metal, on a posix system, or anywhere else.", "it is great to know verilog/know how to design chips somewhat if you're going to be any kind of embedded person though, because it helps to appreciate why the asic team made the chip that way / why are my adcs so noisy / ect.", "also it helps to sling the lingo if you ever have to deal with an asic team / digital design team, because you'll be on somewhat of the same page with minimal thrashing (heh).", "my $0.02: digital design is awesome.", "also it pays very well if you're very good.", "there may be more sw jobs than hw jobs, but that doesn't mean hw is worse by any means.", "smaller teams, less people know the stuff anyways, basically it balances out."], "abstract": ["verilog makes chips, if you're into that.", "if you are, learn it."], "candidates": [[["as a comp eng, you should always know c. digital design is awesome.", "there may be more sw jobs than hw jobs, but that doesn't mean hw is worse by any means."], 0.057971014492753624], [["you should always know c, and be comfortable with using it on bare metal.", "digital design is awesome.", "it pays very well if you're very good."], 0.20175438596491227], [["hardware design/verif/ect is the process of making chips.", "other terms that apply include vlsi, digital design, and black magic.", "as a comp eng, you should always know c."], 0.140291170353564], [["hardware design is the process of making chips.", "you need to know your tools, methodologies, and architectural knowledge.", "digital design is awesome.", "it pays very well if you're very good."], 0.24458874458874458], [["if you're into hardware design, you'll need to know your tools.", "digital design is awesome.", "it pays very well if you're very good."], 0.2942942942942943], [["it really depends on if you're into hardware design/verif/ect or digital design.", "digital design is awesome.", "there may be more sw jobs than hw jobs."], 0.19762351469668546], [["hardware design is the process of making chips.", "you'll need to know your tools, methodologies, and architectural knowledge.", "digital design is awesome.", "it pays very well if you're very good."], 0.23910422049956934], [["digital design pays very well if you're very good.", "as a comp eng, you should always know c, and be comfortable with using it on bare metal."], 0.19678966020429436], [["software engineers need to know hardware design and digital design.", "you should always know c, and be comfortable with using it on bare metal.", "digital design is awesome.", "it pays very well if you're very good."], 0.16111111111111112], [["learn verilog and other tools to help you make decisions.", "digital design pays very well if you're very good.", "smaller teams, less people know the stuff anyways, basically it balances out."], 0.2532299741602067], [["hardware design is a lot more complicated than code.", "it's a lot of work, and it's a art form.", "digital design is awesome.", "it pays very well if you're very good."], 0.14310480693459415], [["if you want to work in hardware design, you need to know verilog and other tools.", "digital design is awesome and pays very well if you're very good."], 0.2246031746031746], [["software engineers need to know hardware design and digital design.", "you should always know c, and be comfortable with using it on bare metal.", "digital design is awesome."], 0.06504065040650407], [["software engineers need to know hardware design and digital design.", "you should always know c, and be comfortable with using it on bare metal."], 0.07207207207207207], [["learn verilog and other tools to help you make decisions.", "digital design pays very well if you're very good."], 0.3056370153144347], [["hardware design is a lot more complicated than code.", "it's a lot of work, and it's a art form.", "digital design is awesome."], 0.03508771929824562]], "article_untok": ["like what others have said, it really depends on if you're into hardware design/verif/ect.", "but wait, whats hardware design/verif/ect?", "well you know making chips, the things that all code runs on?", "yeah it's done with the aptly named hardware design.", "other terms that apply include vlsi, digital design, and black magic.", "if you do choose to go that path, you'll need to know your tools (verilog/vhdl, systemverilog/systemc, specman e, tcl, ect), your methodologies (arch/design/pre-silicon verification/post-sil verif), your architectural knowledge (pipelining/muxing/memory/critical path/block feng-shui).", "keep in mind, you should at least have bits of these tapped, so that you can understand  why  the senior arch says that \"the memory can't be  there  between the fifo buffers and the fabric connections\" when you are tasked with testing the fabric tx rates in post-silicon.", "oh yeah, like normal code, learning verilog does not mean you're good at it.", "sure you can code it, but rtl is an art form.", "you're making thousands, millions, or billions of little transistors and making them do massive jobs (like run arbitrary bytes that create predictable (given corresponding input) results, i.e.", "programs) with attention to clock frequency domains, power constraints, heat, ley lines, and timing issues.", "it's called black magic for a reason.", "now get real good at a handful of those, become an excellent pre-sil simulation wizard, or a crazy nit-picky path/route person, or a knee-deep-in-hardware post-sil verif engineer.", "so yeah that's hardware...anyways:   as a comp eng, you should always know c, and be comfortable with using it on bare metal, on a posix system, or anywhere else.", "it is great to know verilog/know how to design chips somewhat if you're going to be any kind of embedded person though, because it helps to appreciate why the asic team made the chip that way / why are my adcs so noisy / ect.", "also it helps to sling the lingo if you ever have to deal with an asic team / digital design team, because you'll be on somewhat of the same page with minimal thrashing (heh).", "my $0.02: digital design is awesome.", "also it pays very well if you're very good.", "there may be more sw jobs than hw jobs, but that doesn't mean hw is worse by any means.", "smaller teams, less people know the stuff anyways, basically it balances out."], "abstract_untok": ["verilog makes chips, if you're into that.", "if you are, learn it."], "candidates_untok": [[["as a comp eng, you should always know c. digital design is awesome.", "there may be more sw jobs than hw jobs, but that doesn't mean hw is worse by any means."], 0.057971014492753624], [["you should always know c, and be comfortable with using it on bare metal.", "digital design is awesome.", "it pays very well if you're very good."], 0.20175438596491227], [["hardware design/verif/ect is the process of making chips.", "other terms that apply include vlsi, digital design, and black magic.", "as a comp eng, you should always know c."], 0.140291170353564], [["hardware design is the process of making chips.", "you need to know your tools, methodologies, and architectural knowledge.", "digital design is awesome.", "it pays very well if you're very good."], 0.24458874458874458], [["if you're into hardware design, you'll need to know your tools.", "digital design is awesome.", "it pays very well if you're very good."], 0.2942942942942943], [["it really depends on if you're into hardware design/verif/ect or digital design.", "digital design is awesome.", "there may be more sw jobs than hw jobs."], 0.19762351469668546], [["hardware design is the process of making chips.", "you'll need to know your tools, methodologies, and architectural knowledge.", "digital design is awesome.", "it pays very well if you're very good."], 0.23910422049956934], [["digital design pays very well if you're very good.", "as a comp eng, you should always know c, and be comfortable with using it on bare metal."], 0.19678966020429436], [["software engineers need to know hardware design and digital design.", "you should always know c, and be comfortable with using it on bare metal.", "digital design is awesome.", "it pays very well if you're very good."], 0.16111111111111112], [["learn verilog and other tools to help you make decisions.", "digital design pays very well if you're very good.", "smaller teams, less people know the stuff anyways, basically it balances out."], 0.2532299741602067], [["hardware design is a lot more complicated than code.", "it's a lot of work, and it's a art form.", "digital design is awesome.", "it pays very well if you're very good."], 0.14310480693459415], [["if you want to work in hardware design, you need to know verilog and other tools.", "digital design is awesome and pays very well if you're very good."], 0.2246031746031746], [["software engineers need to know hardware design and digital design.", "you should always know c, and be comfortable with using it on bare metal.", "digital design is awesome."], 0.06504065040650407], [["software engineers need to know hardware design and digital design.", "you should always know c, and be comfortable with using it on bare metal."], 0.07207207207207207], [["learn verilog and other tools to help you make decisions.", "digital design pays very well if you're very good."], 0.3056370153144347], [["hardware design is a lot more complicated than code.", "it's a lot of work, and it's a art form.", "digital design is awesome."], 0.03508771929824562]]}