{"article": ["if 32-bit precision is good enough, then you can avoid spending an extra 4 bytes for 64-bit double.", "the issue is that in modern c#, simple operations such as  sin  only exist as  double sin(double theta) ; if you have time represented as a float, then you essentially need to call  (float)sin((double)(time * multiplier)) , which the double cast being implicit.", "haven't benchmarked the computational burden of this, but in complicated math (think: a scientific library that extensively uses pow, e, ln, sin, cos, sqrt), the pervasive casts sure smell."], "abstract": ["what's cleaner?", "float.sqrt(number)  or  (float)math.sqrt((double)number) , with the double cast being implicit?"], "candidates": [[["if 32-bit precision is good enough, then you can avoid spending an extra 4 bytes for 64-bit double.", "in modern c#, simple operations such as  sin only exist as double sin(double theta)"], 0.05031446540880503], [["simple operations such as sin only exist as double sin(double theta) if you have time represented as a float, then you essentially need to call  (float)sin((double)(time * multiplier))"], 0.09523809523809523], [["c#'s casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin((double)(time * multiplier)) the casts are implicit."], 0.2028985507246377], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit."], 0.15873015873015875], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit.", "they are not very efficient.", "they can be very computable."], 0.15384615384615385], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin."], 0.10526315789473684], [["modern c# uses casts instead of single bit operations.", "this means that if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit."], 0.13333333333333333], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit.", "they are not very efficient."], 0.14184397163120568], [["modern c# uses casts instead of single bit operations.", "this means that if you have time represented as a float, then you essentially need to call  (float)sin."], 0.08695652173913043], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit.", "this is a problem in complicated math.", "it's a pain to work with.", "it can be a pain for programmers."], 0.1728395061728395], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit.", "this is a problem in complicated math.", "it's a pain to work with."], 0.1702127659574468], [["the casts are implicit in modern c#.", "they are particularly problematic in complicated math.", "the casts are often used in scientific math.", "they can be used to avoid spending extra bytes on 32-bit double."], 0.13836477987421383], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit.", "this is a problem in complicated math."], 0.13333333333333333], [["the casts are implicit in modern c#.", "they are particularly problematic in complicated math.", "the casts are often used in scientific math."], 0.13333333333333333], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit."], 0.1212121212121212], [["the casts are implicit in modern c#.", "they are particularly problematic in complicated math."], 0.16666666666666666]], "article_untok": ["if 32-bit precision is good enough, then you can avoid spending an extra 4 bytes for 64-bit double.", "the issue is that in modern c#, simple operations such as  sin  only exist as  double sin(double theta) ; if you have time represented as a float, then you essentially need to call  (float)sin((double)(time * multiplier)) , which the double cast being implicit.", "haven't benchmarked the computational burden of this, but in complicated math (think: a scientific library that extensively uses pow, e, ln, sin, cos, sqrt), the pervasive casts sure smell."], "abstract_untok": ["what's cleaner?", "float.sqrt(number)  or  (float)math.sqrt((double)number) , with the double cast being implicit?"], "candidates_untok": [[["if 32-bit precision is good enough, then you can avoid spending an extra 4 bytes for 64-bit double.", "in modern c#, simple operations such as  sin only exist as double sin(double theta)"], 0.05031446540880503], [["simple operations such as sin only exist as double sin(double theta) if you have time represented as a float, then you essentially need to call  (float)sin((double)(time * multiplier))"], 0.09523809523809523], [["c#'s casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin((double)(time * multiplier)) the casts are implicit."], 0.2028985507246377], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit."], 0.15873015873015875], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit.", "they are not very efficient.", "they can be very computable."], 0.15384615384615385], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin."], 0.10526315789473684], [["modern c# uses casts instead of single bit operations.", "this means that if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit."], 0.13333333333333333], [["c# casts are pervasive.", "if you have time represented as a float, then you essentially need to call  (float)sin.", "the casts are implicit.", "they are not very efficient."], 0.14184397163120568], [["modern c# uses casts instead of single bit operations.", "this means that if you have time represented as a float, then you essentially need to call  (float)sin."], 0.08695652173913043], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit.", "this is a problem in complicated math.", "it's a pain to work with.", "it can be a pain for programmers."], 0.1728395061728395], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit.", "this is a problem in complicated math.", "it's a pain to work with."], 0.1702127659574468], [["the casts are implicit in modern c#.", "they are particularly problematic in complicated math.", "the casts are often used in scientific math.", "they can be used to avoid spending extra bytes on 32-bit double."], 0.13836477987421383], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit.", "this is a problem in complicated math."], 0.13333333333333333], [["the casts are implicit in modern c#.", "they are particularly problematic in complicated math.", "the casts are often used in scientific math."], 0.13333333333333333], [["modern c# allows you to cast 32-bit to 64-bit.", "the casts are implicit."], 0.1212121212121212], [["the casts are implicit in modern c#.", "they are particularly problematic in complicated math."], 0.16666666666666666]]}