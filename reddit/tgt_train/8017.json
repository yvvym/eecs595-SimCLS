{"article": ["indeed, it hasn't.", "draughts (checkers) was \"solved\" in 2007, but the number of legal board states in draughts in approximately a square root of the number of legal board states in chess.", "these problems are  huge .", "decks of cards   i was once given the (theoretical) challenge of designing a time-optimised shuffler for a deck of cards (i.e.", "an array randomiser).", "i asked if there were any limitations on memory, and was told no, so i concluded that the best option was to pre-generate all possible states of a deck of cards, and then randomly select one of the states!", "it's the equivalent of keeping on a shelf a deck of cards in every possible permutation and picking one at random: incredibly time-efficient... but how much shelving do you need?", "my solution takes a  lot  of memory, but as the questioner stated that memory was no object, it was theoretically the most efficient.", "how much memory, exactly?", "well, let's assign each of the 52 cards in a regular french-suited deck a number from zero to 51. for each deck, we'll store an array of each of the first 51 cards (the 52nd card can be derived from its absence in the first 51, for an almost 2% memory saving).", "store each number as a 6-bit binary number from 000000 to 110011 (it's probably possible to optimise this slightly).", "therefore, each deck of cards consumes 39 bytes of memory to store.", "there are 52!", "permutations for a deck of cards, so the amount of memory we need is 52!", "x 39 bytes... equals... **[about three quattuordecillion yottabytes]( wow: that escalated quickly.", "boards of chess   a chessboard has marginally fewer permutations than a deck of cards: estimated at only  about 10^43 .", "but that \"only\" is still quite a lot.", "suppose we store each chessboard as an array of 64 numbers (one for each square on the board; each is either a binary 0 (no chess piece stored here) or a binary 1 followed by a 4-bit number to reflect the colour (1 bit) and type (3 bit) of the piece.", "again, it's possible that this could be optimised either by storing instead (a) the  positions  of the surviving pieces or (b) the  changes  from a starting state, or by (c) understanding the limitations of some of the pieces (e.g.", "a bishop will always stay on its own colour, halving the permutations for any given bishop; a king can never put itself in check nor be in check for two consecutive turns, which removes certain rare permutations because there's no way they can occur organically).", "but it'll do for a back-of-napkin calculation.", "that means that each board state will consume up to (16 x 4) + 48 bits = 112 bits = 14 bytes.", "so the total is [10^43 x 14 bytes]( equals a mere  hundred and forty quintillion yottabytes .", "of course, neither of these calculations consider the possibility of data compression, which could make vast improvements, but would doubtless slow down any meaningful chess computer.", "and who  needs  a solution to chess?", "the best computers can consistently beat the best human grandmasters easily \"merely\" by partially-solving 7 moves ahead."], "abstract": ["solving\" chess in any way that was meaningfully usable, using contemporary understanding of computers, would probably take up more space than it would take to download all of the data anywhere on the web"], "candidates": [[["a chessboard has marginally fewer permutations than a deck of cards.", "but that \"only\" is still quite a lot.", "the best computers can consistently beat the best human grandmasters easily \"merely\" by partially-solving 7 moves ahead"], 0.11267605633802817], [["draughts was \"solved\" in 2007, but the number of legal board states in draughts is approximately a square root of the number in chess.", "a chessboard has marginally fewer permutations than a deck of cards: estimated"], 0.15266106442577032], [["the number of legal board states in draughts is approximately a square root of the number of board states  in chess.", "a chessboard has marginally fewer permutations than a deck of cards.", "the best computers can consistently beat the best human grand"], 0.13181602655286864], [["the number of legal board states in draughts is approximately a square root of the number of board states  in chess.", "the best computers can consistently beat the best human grandmasters easily \"merely\" by partially-solving 7 moves"], 0.12989417989417987], [["the number of legal board states in draughts is approximately a square root of the number of board states of chess.", "a chessboard has marginally fewer permutations than a deck of cards: estimated at only 10^43.", "the best"], 0.11897871245739276], [["chess is a much bigger problem than a deck of cards.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead.", "the number of legal board states in draughts is approximately a square root of the number of board states"], 0.14552406657669817], [["draughts (checkers) was \"solved\" in 2007, but chess hasn't.", "the number of legal board states in draughts is approximately a square root of the number oflegal board states  in chess."], 0.1439153439153439], [["chess problems are huge, says computer scientist.", "draughts (checkers) was \"solved\" in 2007, but chess hasn't.", "the number of legal board states in draughts is approximately a square root of the number oflegal"], 0.15715983363042188], [["the number of legal board states in draughts is about a square root of the number of board states on chess.", "a chessboard has marginally fewer permutations than a deck of cards.", "the best computers can consistently beat the best human grandmasters"], 0.14935988620199145], [["chess is a huge problem, but it's not as big as checkers.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead.", "but the problem is still huge, and it could take a lot of memory to"], 0.13157894736842105], [["chess has more permutations than a deck of cards.", "each chessboard requires about three quattuordecillion yottabytes to store."], 0.1282051282051282], [["a deck of cards has 52 permutations, but chess has 10^43.", "each chessboard state takes up to 14 bytes of memory.", "chess computers can beat the best grandmasters by partially solving 7 moves ahead."], 0.16453962073689524], [["chess is a much bigger problem than a deck of cards.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead."], 0.13559322033898305], [["chess is a huge problem, but it's not as big as checkers.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead."], 0.1092896174863388], [["chessboard has more permutations than a deck of cards.", "each deck of cards consumes 39 bytes of memory to store.", "chessboard is estimated at only 10^43."], 0.10928961748633881], [["a deck of cards has 52 permutations, but chess has 10^43.", "each chessboard state takes up to 14 bytes of memory."], 0.14329805996472664]], "article_untok": ["indeed, it hasn't.", "draughts (checkers) was \"solved\" in 2007, but the number of legal board states in draughts in approximately a square root of the number of legal board states in chess.", "these problems are  huge .", "decks of cards   i was once given the (theoretical) challenge of designing a time-optimised shuffler for a deck of cards (i.e.", "an array randomiser).", "i asked if there were any limitations on memory, and was told no, so i concluded that the best option was to pre-generate all possible states of a deck of cards, and then randomly select one of the states!", "it's the equivalent of keeping on a shelf a deck of cards in every possible permutation and picking one at random: incredibly time-efficient... but how much shelving do you need?", "my solution takes a  lot  of memory, but as the questioner stated that memory was no object, it was theoretically the most efficient.", "how much memory, exactly?", "well, let's assign each of the 52 cards in a regular french-suited deck a number from zero to 51. for each deck, we'll store an array of each of the first 51 cards (the 52nd card can be derived from its absence in the first 51, for an almost 2% memory saving).", "store each number as a 6-bit binary number from 000000 to 110011 (it's probably possible to optimise this slightly).", "therefore, each deck of cards consumes 39 bytes of memory to store.", "there are 52!", "permutations for a deck of cards, so the amount of memory we need is 52!", "x 39 bytes... equals... **[about three quattuordecillion yottabytes]( wow: that escalated quickly.", "boards of chess   a chessboard has marginally fewer permutations than a deck of cards: estimated at only  about 10^43 .", "but that \"only\" is still quite a lot.", "suppose we store each chessboard as an array of 64 numbers (one for each square on the board; each is either a binary 0 (no chess piece stored here) or a binary 1 followed by a 4-bit number to reflect the colour (1 bit) and type (3 bit) of the piece.", "again, it's possible that this could be optimised either by storing instead (a) the  positions  of the surviving pieces or (b) the  changes  from a starting state, or by (c) understanding the limitations of some of the pieces (e.g.", "a bishop will always stay on its own colour, halving the permutations for any given bishop; a king can never put itself in check nor be in check for two consecutive turns, which removes certain rare permutations because there's no way they can occur organically).", "but it'll do for a back-of-napkin calculation.", "that means that each board state will consume up to (16 x 4) + 48 bits = 112 bits = 14 bytes.", "so the total is [10^43 x 14 bytes]( equals a mere  hundred and forty quintillion yottabytes .", "of course, neither of these calculations consider the possibility of data compression, which could make vast improvements, but would doubtless slow down any meaningful chess computer.", "and who  needs  a solution to chess?", "the best computers can consistently beat the best human grandmasters easily \"merely\" by partially-solving 7 moves ahead."], "abstract_untok": ["solving\" chess in any way that was meaningfully usable, using contemporary understanding of computers, would probably take up more space than it would take to download all of the data anywhere on the web"], "candidates_untok": [[["a chessboard has marginally fewer permutations than a deck of cards.", "but that \"only\" is still quite a lot.", "the best computers can consistently beat the best human grandmasters easily \"merely\" by partially-solving 7 moves ahead"], 0.11267605633802817], [["draughts was \"solved\" in 2007, but the number of legal board states in draughts is approximately a square root of the number in chess.", "a chessboard has marginally fewer permutations than a deck of cards: estimated"], 0.15266106442577032], [["the number of legal board states in draughts is approximately a square root of the number of board states  in chess.", "a chessboard has marginally fewer permutations than a deck of cards.", "the best computers can consistently beat the best human grand"], 0.13181602655286864], [["the number of legal board states in draughts is approximately a square root of the number of board states  in chess.", "the best computers can consistently beat the best human grandmasters easily \"merely\" by partially-solving 7 moves"], 0.12989417989417987], [["the number of legal board states in draughts is approximately a square root of the number of board states of chess.", "a chessboard has marginally fewer permutations than a deck of cards: estimated at only 10^43.", "the best"], 0.11897871245739276], [["chess is a much bigger problem than a deck of cards.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead.", "the number of legal board states in draughts is approximately a square root of the number of board states"], 0.14552406657669817], [["draughts (checkers) was \"solved\" in 2007, but chess hasn't.", "the number of legal board states in draughts is approximately a square root of the number oflegal board states  in chess."], 0.1439153439153439], [["chess problems are huge, says computer scientist.", "draughts (checkers) was \"solved\" in 2007, but chess hasn't.", "the number of legal board states in draughts is approximately a square root of the number oflegal"], 0.15715983363042188], [["the number of legal board states in draughts is about a square root of the number of board states on chess.", "a chessboard has marginally fewer permutations than a deck of cards.", "the best computers can consistently beat the best human grandmasters"], 0.14935988620199145], [["chess is a huge problem, but it's not as big as checkers.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead.", "but the problem is still huge, and it could take a lot of memory to"], 0.13157894736842105], [["chess has more permutations than a deck of cards.", "each chessboard requires about three quattuordecillion yottabytes to store."], 0.1282051282051282], [["a deck of cards has 52 permutations, but chess has 10^43.", "each chessboard state takes up to 14 bytes of memory.", "chess computers can beat the best grandmasters by partially solving 7 moves ahead."], 0.16453962073689524], [["chess is a much bigger problem than a deck of cards.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead."], 0.13559322033898305], [["chess is a huge problem, but it's not as big as checkers.", "the best computers can beat the best grandmasters by partially solving 7 moves ahead."], 0.1092896174863388], [["chessboard has more permutations than a deck of cards.", "each deck of cards consumes 39 bytes of memory to store.", "chessboard is estimated at only 10^43."], 0.10928961748633881], [["a deck of cards has 52 permutations, but chess has 10^43.", "each chessboard state takes up to 14 bytes of memory."], 0.14329805996472664]]}